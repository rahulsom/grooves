buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:views-gradle:1.1.5"
        classpath "gradle.plugin.com.sourcemuse.gradle.plugin:gradle-mongo-plugin:1.0.0"
        classpath 'com.wiredforcode:gradle-spawn-plugin:0.6.0'
    }
}

version "0.1"
group "rxrest"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"
apply plugin: "com.sourcemuse.mongo"
apply from: "../../../gradle/codenarc/codenarc.gradle"
// apply from: "../../../gradle/cobertura.gradle"
apply plugin: 'com.wiredforcode.spawn'

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-async"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    console "org.grails:grails-console"
    profile "org.grails.profiles:rest-api"
    runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-datastore-rest-client"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    compile 'org.grails.plugins:rx-gorm-rest-client:1.0.0.RELEASE'
    compile project(':grooves-gorm')
    testCompile project(':grooves-example-test')
    compile "org.grails.plugins:rxjava"
    compile "org.grails.plugins:mongodb"

}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
}

tasks.findByName('bootRun').dependsOn 'startMongoDb', 'startServer'
tasks.findByName('bootRun').finalizedBy 'stopMongoDb', 'stopServer'
tasks.findByName('integrationTest').dependsOn 'startMongoDb', 'startServer'
tasks.findByName('integrationTest').finalizedBy 'stopMongoDb', 'stopServer'

import com.wiredforcode.gradle.spawn.*

task startServer(type: SpawnProcessTask, dependsOn: ':examples/grails/restserver:assemble') {
    command "java -jar ${tasks.findByPath(':examples/grails/restserver:war').archivePath}"
    ready 'Grails application running at http://localhost:8081'
    directory projectDir.absolutePath
}

startServer.doFirst {
    file("${projectDir.absolutePath}/.pid.lock").delete()
}

task stopServer(type: KillProcessTask) {
    directory projectDir.absolutePath
}

mongo {
    port 27020
}

sonarqube {
    properties {
        property 'sonar.moduleKey', 'com.github.rahulsom:grooves:examples-grails-rxrest'
    }
}