buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "com.gradle:build-scan-plugin:latest.release"
        classpath "me.champeau.gradle:buildscan-recipes-plugin:latest.release"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:latest.release"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:latest.release"
        classpath "com.netflix.nebula:nebula-release-plugin:latest.release"
    }
}

apply plugin: "com.gradle.build-scan"
apply plugin: "me.champeau.buildscan-recipes"
apply plugin: "io.codearte.nexus-staging"
apply plugin: "org.sonarqube"
apply plugin: "nebula.release"

allprojects {
    group = 'com.github.rahulsom'
}

subprojects {
    repositories {
        jcenter()
    }
    apply plugin: 'checkstyle'

    checkstyle {
        configFile = rootProject.file('gradle/checkstyle/checkstyle.xml')
        toolVersion = "7.6.1"
        showViolations = false
        maxWarnings = 0
        maxErrors = 0
    }
}

gradle.releasable.each {
    tasks.release.dependsOn "grooves-${it}:uploadArchives"
}
tasks.release.dependsOn 'grooves-docs:gitPublishPush'

project.afterEvaluate {
    gradle.releasable.each {
        project.tasks.findByName('closeRepository').mustRunAfter "grooves-${it}:uploadArchives"
    }

    if (!version.toString().endsWith('-SNAPSHOT')) {
        tasks.release.dependsOn 'closeAndPromoteRepository'// , 'srcclr'
    }
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

buildScanRecipes {
    recipes 'git-commit', 'git-status', 'travis-ci', 'gc-stats'
}

nexusStaging {
    delayBetweenRetriesInMillis = 10000
    numberOfRetries = 30
}
