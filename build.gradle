buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "me.champeau.gradle:buildscan-recipes-plugin:0.2.3"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0"
        classpath "com.netflix.nebula:nebula-release-plugin:12.0.0"
    }
}

apply plugin: "me.champeau.buildscan-recipes"
apply plugin: "io.codearte.nexus-staging"
apply plugin: "org.sonarqube"
apply plugin: "nebula.release"

allprojects {
    group = 'com.github.rahulsom'
}

subprojects {
    repositories {
        google()
        mavenCentral()
    }
    apply plugin: 'checkstyle'

    checkstyle {
        configFile = rootProject.file('gradle/checkstyle/checkstyle.xml')
        toolVersion = "7.6.1"
        showViolations = false
        maxWarnings = 0
        maxErrors = 0
    }

    def theProject = project
    def projectPath = theProject.name
    while (theProject.parent != rootProject) {
        projectPath = "${theProject.parent.name}-${projectPath}"
        theProject = theProject.parent
    }

    sonarqube {
        properties {
            property 'sonar.moduleKey', "com.github.rahulsom:grooves:${projectPath}"
        }
    }
}

gradle.releasable.each {
    tasks.release.dependsOn "grooves-${it}:uploadArchives"
}
tasks.getByName('release').dependsOn 'grooves-docs:gitPublishPush'

project.afterEvaluate {
    gradle.releasable.each {
        project.tasks.findByName('closeRepository').mustRunAfter "grooves-${it}:uploadArchives"
    }

    if (!version.toString().endsWith('-SNAPSHOT')) {
        tasks.release.dependsOn 'closeAndReleaseRepository'// , 'srcclr'
    }
}

buildScanRecipes {
    recipes 'git-commit', 'git-status', 'travis-ci', 'gc-stats'
}

nexusStaging {
    delayBetweenRetriesInMillis = 10000
    numberOfRetries = 30
}
