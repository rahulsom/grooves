buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.bmuschko:gradle-nexus-plugin:latest.release"
        classpath 'org.owasp:dependency-check-gradle:latest.release'
        classpath 'com.netflix.nebula:gradle-info-plugin:latest.release'
    }
}

apply plugin: com.bmuschko.gradle.nexus.NexusPlugin
apply plugin: org.owasp.dependencycheck.gradle.DependencyCheckPlugin
apply plugin: nebula.plugin.info.InfoPlugin

dependencyLocking {
    lockAllConfigurations()
}

task resolveAndLockAll {
    doFirst {
        assert gradle.startParameter.writeDependencyLocks
    }
    doLast {
        configurations.each {
            if (it.canBeResolved && !(it.name in ['jacocoAgent', 'jacocoAnt', 'checkstyle'])) {
                it.resolve()
            }
        }
    }
}

modifyPom {
    project {
        name project.name.split('-').collect { it.capitalize() }.join(' ')
        description project.description
        url 'https://github.com/rahulsom/grooves'
        inceptionYear '2017'

        scm {
            url 'https://github.com/rahulsom/grooves'
            connection 'scm:https://github.com/rahulsom/grooves.git'
            developerConnection 'scm:git://github.com/rahulsom/grooves.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'rahulsom'
                name 'Rahul Somasunderam'
                email 'rahul.som@gmail.com'
            }
        }

        issueManagement {
            system 'Github'
            url 'https://github.com/rahulsom/grooves/issues'
        }
    }
}

extraArchive {
    sources = true
    tests = true
    javadoc = false
}

nexus {
    sign = !version.toString().contains('-SNAPSHOT')
}

dependencyCheck {
    suppressionFile = file("$rootDir/gradle/owasp-suppressions.xml")
    skipConfigurations = [
            // KtLint is a build dependency scope. Nothing gets shipped.
            'ktlint',

            // Dependencies in compileOnly are never shipped. They are marked optional in the pom
            'compileOnly',

            // This is a computed scope.
            'compileClasspath',
    ]
    format = 'ALL'
    failOnError = true
}

tasks.findByName('dependencyCheckAnalyze').
        doLast {
            /*
             * grooves-diagrams lights up like a christmas tree because of asciidoctor and jruby.
             * It shouldn't be a major problem as long as it's used in a gradle task.
             */
            if (project.name != 'grooves-diagrams') {
                if (file("$buildDir/reports/dependency-check-report.csv").readLines().size() > 1) {
                    ant.fail("There's a dependency check failure. Check $buildDir/reports/dependency-check-report.html")
                }
            }
        }

tasks.findByName('check').dependsOn('dependencyCheckAnalyze')